uint32_t getZoneColor(int zone) {
 switch (zone) {
 case 1: return strip.Color(75, 75, 75);  // Light Gray
 case 15: return strip.Color(100, 0, 155); //Darker Purple
 case 2: return strip.Color(0, 0, 255);  // Blue
 case 25: return strip.Color(0, 100, 255); //lighter Blue
 case 3: return strip.Color(0, 255, 0);  // Green
 case 35: return strip.Color(100, 255, 100); //lighter Green
 case 4: return strip.Color(255, 255, 0);  // Yellow
 case 45: return strip.Color(255, 200, 0); //Darker Yellow
 case 5: return strip.Color(255, 165, 0);  // Orange
 case 55: return strip.Color(255, 100, 0); //Darker Orange
 case 6: return strip.Color(255, 0, 0);  // Red
 case 7: return strip.Color(255, 192, 203); // Pink
 default: return strip.Color(0, 0, 0);
 }
}

void updateLEDs(int power) {
 int zone = getPowerZone(power);
 uint32_t color = getZoneColor(zone);
 uint8_t r = (color >> 16) & 0xFF;
 uint8_t g = (color >> 8) & 0xFF;
 uint8_t b = color & 0xFF;

 r = (r * BRIGHTNESS_PERCENT) / 100;
 g = (g * BRIGHTNESS_PERCENT) / 100;
 b = (b * BRIGHTNESS_PERCENT) / 100;

 int ledCount = 0;
 int startLed = 0;

 switch (zone) {
 case 1:
 case 15:
  ledCount = ZONE_1_LEDS;
  break;
 case 2:
 case 25:
  startLed = ZONE_1_LEDS;
  ledCount = ZONE_2_LEDS;
  break;
 case 3:
 case 35:
  startLed = ZONE_1_LEDS + ZONE_2_LEDS;
  ledCount = ZONE_3_LEDS;
  break;
 case 4:
 case 45:
  startLed = ZONE_1_LEDS + ZONE_2_LEDS + ZONE_3_LEDS;
  ledCount = ZONE_4_LEDS;
  break;
 case 5:
 case 55:
  startLed = ZONE_1_LEDS + ZONE_2_LEDS + ZONE_3_LEDS + ZONE_4_LEDS;
  ledCount = ZONE_5_LEDS;
  break;
 case 6:
 case 7:
  startLed = ZONE_1_LEDS + ZONE_2_LEDS + ZONE_3_LEDS + ZONE_4_LEDS + ZONE_5_LEDS;
  ledCount = ZONE_6_LEDS;
  break;
 default:
  break;
 }

 for (int i = startLed; i < startLed + ledCount; i++) {
  strip.setPixelColor(i, strip.Color(r, g, b));
 }

 strip.show();

 // Clear the remaining LEDs
 for (int i = startLed + ledCount; i < LED_COUNT; i++) {
  strip.setPixelColor(i, 0, 0, 0);
 }

 if (startLed > 0){
  for(int i = 0; i < startLed; i++){
   strip.setPixelColor(i,0,0,0);
  }
 }

 strip.show();

}

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
 void onResult(BLEAdvertisedDevice advertisedDevice) {
  Serial.print("BLE Advertised Device found: ");
  Serial.println(advertisedDevice.toString().c_str());
  Serial.print("RSSI: ");
  Serial.println(advertisedDevice.getRSSI());

  if (advertisedDevice.getAddress() == targetAddress) { // Check for target address
   Serial.print("Target Power Meter found. address: ");
   Serial.println(advertisedDevice.getAddress().toString().c_str());
   advertisedDevice.getScan()->stop();
   pServerAddress = new BLEAddress(advertisedDevice.getAddress());
   doConnect = true;
  }
 }
};

void setup() {
 Serial.begin(115200);
 strip.begin();
 strip.show();
 BLEDevice::init("ESP32_Power_LED");
 BLEScan* pBLEScan = BLEDevice::getScan();
 pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
 pBLEScan->setActiveScan(true);
 pBLEScan->start(SCAN_TIME);
}

void loop() {
 unsigned long lastScanBlink = 0;
 const long scanBlinkInterval = 500;

 if (doConnect) {
  BLEClient* pClient = BLEDevice::createClient();
  pClient->setClientCallbacks(new MyClientCallback());
  Serial.println("Attempting to connect...");
  delay(200);
  if (pClient->connect(*pServerAddress)) {
   delay(200);
   Serial.println("Connected to server");
   if (pClient->isConnected()) {
    Serial.println("Client is connected.");
    pRemoteService = pClient->getService(serviceUUID);
    if (pRemoteService != nullptr) {
     Serial.println("Service found");
     pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);
     if (pRemoteCharacteristic != nullptr) {
      Serial.println("Characteristic found");
      if (pRemoteCharacteristic->canNotify()) {
       Serial.println("Characteristic can notify");
       pRemoteCharacteristic->registerForNotify(notifyCallback);
       connected = true;
       doConnect = false;
      } else {
       Serial.println("Error: Characteristic cannot notify");
       pClient->disconnect();
       doConnect = false;
      }
     } else {
      Serial.println("Error: Characteristic not found");
      pClient->disconnect();
      doConnect = false;
     }
    } else {
     Serial.println("Error: Service not found");
     pClient->disconnect();
     doConnect = false;
    }
   } else {
    Serial.println("Error: Client is not connected after connect function");
    pClient->disconnect();
    doConnect = false;
   }
  } else {
   Serial.println("Error: Failed to connect to server");
   doConnect = false;
  }
  if (!connected) {
   Serial.println("Connection failed. Restarting scan after delay...");
   delay(RETRY_DELAY);
   BLEDevice::getScan()->start(SCAN_TIME);
  }
 }

 if (connected) {
  // No need to call readValue() here if you are using notifyCallback
 } else if (doScan) {
  if (millis() - lastScanBlink >= scanBlinkInterval) {
   scanBlink();
   lastScanBlink = millis();
  }
 }

 delay(10);
}

void scanBlink() {
 for (int i = 0; i < LED_COUNT; i++) {
  strip.setPixelColor(i, 0, 0, 255);
 }
 strip.show();
 delay(250);
 for (int i = 0; i < LED_COUNT; i++) {
  strip.setPixelColor(i, 0, 0, 0);
 }
 strip.show();
 delay(250);
}
