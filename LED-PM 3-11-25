#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <Adafruit_NeoPixel.h>
#include <deque>

#define LED_PIN 4
#define LED_COUNT 144
#define SCAN_TIME 60
#define RETRY_DELAY 5000
#define SAMPLE_RATE 10 // Approximate samples per second. Adjust as needed.
#define SMOOTHING_WINDOW SAMPLE_RATE // 1-second window
#define BRIGHTNESS_PERCENT 80 // Reduced brightness to 80%

// Define power zones and sub-zones
#define ZONE_1_MAX 50
#define ZONE_1A_MAX 51
#define ZONE_2_MAX 125
#define ZONE_2A_MAX 150
#define ZONE_3_MAX 160
#define ZONE_3A_MAX 200
#define ZONE_4_MAX 212
#define ZONE_4A_MAX 260
#define ZONE_5_MAX 273
#define ZONE_5A_MAX 370
#define ZONE_6_MAX 380

// Define LED counts for each zone
#define ZONE_1_LEDS 90
#define ZONE_2_LEDS 100
#define ZONE_3_LEDS 110
#define ZONE_4_LEDS 120
#define ZONE_5_LEDS 130
#define ZONE_6_LEDS 144

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

static BLEUUID serviceUUID("1818"); // Cycling Power Service UUID
static BLEUUID charUUID("2A63"); // Cycling Power Measurement Characteristic UUID

static boolean doConnect = false;
static boolean connected = false;
static boolean doScan = true;
static BLERemoteCharacteristic* pRemoteCharacteristic;
static BLERemoteService* pRemoteService;
static BLEAddress* pServerAddress;

BLEAddress targetAddress("C9:35:6D:0D:51:03"); // Target Power Meter Address

std::deque<int16_t> powerHistory; // Store power samples for smoothing

class MyClientCallback : public BLEClientCallbacks {
 void onConnect(BLEClient* pclient) {
 connected = true;
 doScan = false;
 Serial.println("Client Connected");
 }

 void onDisconnect(BLEClient* pclient) {
 connected = false;
 doScan = true;
 Serial.println("Client Disconnected");
 powerHistory.clear(); // Clear history on disconnect.
 }
};

static void notifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
 static unsigned long lastReceiveTime = 0;
 unsigned long currentTime = millis();
 if (length >= 4) { // Ensure enough data for power measurement
 int16_t power = (pData[3] << 8) | pData[2]; // Power is in bytes 2 and 3 (little-endian)
 powerHistory.push_back(power);

 if (powerHistory.size() > SMOOTHING_WINDOW) {
  powerHistory.pop_front();
 }

 int32_t sum = 0;
 for (int16_t p : powerHistory) {
  sum += p;
 }

 int16_t smoothedPower = powerHistory.empty() ? 0 : sum / powerHistory.size(); // Calculate average
 Serial.print("Smoothed Power: ");
 Serial.println(smoothedPower);
 updateLEDs(smoothedPower);
 Serial.print("Time since last receive: ");
 Serial.println(currentTime - lastReceiveTime);
 lastReceiveTime = currentTime;
 } else {
 Serial.println("Error: Power data length is invalid.");
 }
}

int getPowerZone(int power) {
 if (power <= ZONE_1_MAX) return 1;
 if (power <= ZONE_1A_MAX) return 15; // 1.5 for 1A
 if (power <= ZONE_2_MAX) return 2;
 if (power <= ZONE_2A_MAX) return 25; // 2.5 for 2A
 if (power <= ZONE_3_MAX) return 3;
 if (power <= ZONE_3A_MAX) return 35; // 3.5 for 3A
 if (power <= ZONE_4_MAX) return 4;
 if (power <= ZONE_4A_MAX) return 45; // 4.5 for 4A
 if (power <= ZONE_5_MAX) return 5;
 if (power <= ZONE_5A_MAX) return 55; // 5.5 for 5A
 if (power <= ZONE_6_MAX) return 6;
 return 7;
}
uint32_t getZoneColor(int zone) {
 switch (zone) {
 case 1: return strip.Color(75, 75, 75);  // Light Gray
 case 15: return strip.Color(100, 0, 155); //Darker Purple
 case 2: return strip.Color(0, 0, 255);  // Blue
 case 25: return strip.Color(0, 100, 255); //lighter Blue
 case 3: return strip.Color(0, 255, 0);  // Green
 case 35: return strip.Color(100, 255, 100); //lighter Green
 case 4: return strip.Color(255, 255, 0);  // Yellow
 case 45: return strip.Color(255, 200, 0); //Darker Yellow
 case 5: return strip.Color(255, 165, 0);  // Orange
 case 55: return strip.Color(255, 100, 0); //Darker Orange
 case 6: return strip.Color(255, 0, 0);  // Red
 case 7: return strip.Color(255, 192, 203); // Pink
 default: return strip.Color(0, 0, 0);
 }
}

void updateLEDs(int power) {
  int zone = getPowerZone(power);
  uint32_t color = getZoneColor(zone);
  uint8_t r = (color >> 16) & 0xFF;
  uint8_t g = (color >> 8) & 0xFF;
  uint8_t b = color & 0xFF;

  r = (r * BRIGHTNESS_PERCENT) / 100;
  g = (g * BRIGHTNESS_PERCENT) / 100;
  b = (b * BRIGHTNESS_PERCENT) / 100;

  int ledCount = 0;
  int startLed = 0; // Always start from 0

  switch (zone) {
    case 1:
    case 15:
      ledCount = ZONE_1_LEDS;
      break;
    case 2:
    case 25:
      ledCount = ZONE_2_LEDS;
      break;
    case 3:
    case 35:
      ledCount = ZONE_3_LEDS;
      break;
    case 4:
    case 45:
      ledCount = ZONE_4_LEDS;
      break;
    case 5:
    case 55:
      ledCount = ZONE_5_LEDS;
      break;
    case 6:
    case 7:
      ledCount = ZONE_6_LEDS;
      break;
    default:
      break;
  }

  // Clear the entire strip before updating
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, 0, 0, 0);
  }

  // Update the LEDs for the current zone
  for (int i = startLed; i < ledCount; i++) { //use ledCount here, not startLed + ledCount
    strip.setPixelColor(i, strip.Color(r, g, b));
  }

  strip.show();

  // Debugging Serial Prints
  Serial.print("Zone: ");
  Serial.print(zone);
  Serial.print(", Start LED: ");
  Serial.print(startLed);
  Serial.print(", LED Count: ");
  Serial.println(ledCount);
}

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
 void onResult(BLEAdvertisedDevice advertisedDevice) {
  Serial.print("BLE Advertised Device found: ");
  Serial.println(advertisedDevice.toString().c_str());
  Serial.print("RSSI: ");
  Serial.println(advertisedDevice.getRSSI());

  if (advertisedDevice.getAddress() == targetAddress) { // Check for target address
   Serial.print("Target Power Meter found. address: ");
   Serial.println(advertisedDevice.getAddress().toString().c_str());
   advertisedDevice.getScan()->stop();
   pServerAddress = new BLEAddress(advertisedDevice.getAddress());
   doConnect = true;
  }
 }
};

void setup() {
 Serial.begin(115200);
 strip.begin();
 strip.show();
 BLEDevice::init("ESP32_Power_LED");
 BLEScan* pBLEScan = BLEDevice::getScan();
 pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
 pBLEScan->setActiveScan(true);
 pBLEScan->start(SCAN_TIME);
}

void loop() {
 unsigned long lastScanBlink = 0;
 const long scanBlinkInterval = 500;

 if (doConnect) {
  BLEClient* pClient = BLEDevice::createClient();
  pClient->setClientCallbacks(new MyClientCallback());
  Serial.println("Attempting to connect...");
  delay(200);
  if (pClient->connect(*pServerAddress)) {
   delay(200);
   Serial.println("Connected to server");
   if (pClient->isConnected()) {
    Serial.println("Client is connected.");
    pRemoteService = pClient->getService(serviceUUID);
    if (pRemoteService != nullptr) {
     Serial.println("Service found");
     pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);
     if (pRemoteCharacteristic != nullptr) {
      Serial.println("Characteristic found");
      if (pRemoteCharacteristic->canNotify()) {
       Serial.println("Characteristic can notify");
       pRemoteCharacteristic->registerForNotify(notifyCallback);
       connected = true;
       doConnect = false;
      } else {
       Serial.println("Error: Characteristic cannot notify");
       pClient->disconnect();
       doConnect = false;
      }
     } else {
      Serial.println("Error: Characteristic not found");
      pClient->disconnect();
      doConnect = false;
     }
    } else {
     Serial.println("Error: Service not found");
     pClient->disconnect();
     doConnect = false;
    }
   } else {
    Serial.println("Error: Client is not connected after connect function");
    pClient->disconnect();
    doConnect = false;
   }
  } else {
   Serial.println("Error: Failed to connect to server");
   doConnect = false;
  }
  if (!connected) {
   Serial.println("Connection failed. Restarting scan after delay...");
   delay(RETRY_DELAY);
   BLEDevice::getScan()->start(SCAN_TIME);
  }
 }

 if (connected) {
  // No need to call readValue() here if you are using notifyCallback
 } else if (doScan) {
  if (millis() - lastScanBlink >= scanBlinkInterval) {
   scanBlink();
   lastScanBlink = millis();
  }
 }

 // Remove or reduce the delay
 // delay(10);
}

void scanBlink() {
 for (int i = 0; i < LED_COUNT; i++) {
  strip.setPixelColor(i, 0, 0, 255);
 }
 strip.show();
 delay(250);
 for (int i = 0; i < LED_COUNT; i++) {
  strip.setPixelColor(i, 0, 0, 0);
 }
 strip.show();
 delay(250);
}
