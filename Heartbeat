#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <Adafruit_NeoPixel.h>

#define LED_PIN 4
#define LED_COUNT 144
#define SCAN_TIME 60
#define RETRY_DELAY 5000
#define PULSE_DURATION 200 // Duration of the pulse in milliseconds

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

static BLEUUID serviceUUID("180D"); // Heart Rate Service UUID
static BLEUUID charUUID("2A37");   // Heart Rate Measurement Characteristic UUID

static boolean doConnect = false;
static boolean connected = false;
static boolean doScan = true;
static BLERemoteCharacteristic* pRemoteCharacteristic;
static BLERemoteService* pRemoteService;
static BLEAddress* pServerAddress;

unsigned long lastHeartbeatTime = 0;
int currentHeartRate = 0;

class MyClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient* pclient) {
    connected = true;
    doScan = false;
    Serial.println("Client Connected");
  }

  void onDisconnect(BLEClient* pclient) {
    connected = false;
    doScan = true;
    Serial.println("Client Disconnected");
  }
};

static void notifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
  if (length > 1) {
    currentHeartRate = pData[1];
    Serial.print("Heart Rate: ");
    Serial.println(currentHeartRate);
    lastHeartbeatTime = millis();
    pulseLEDs();
  } else {
    Serial.println("Error: Heart rate data length is invalid.");
  }
}

int getHeartRateZone(int heartRate) {
  if (heartRate <= 100) return 1;
  if (heartRate <= 130) return 2;
  if (heartRate <= 150) return 3;
  if (heartRate <= 170) return 4;
  return 5;
}

uint32_t getZoneColor(int zone) {
  switch (zone) {
    case 1: return strip.Color(0, 0, 255);
    case 2: return strip.Color(0, 255, 0);
    case 3: return strip.Color(255, 255, 0);
    case 4: return strip.Color(255, 165, 0);
    case 5: return strip.Color(255, 0, 0);
    default: return strip.Color(0, 0, 0);
  }
}

void pulseLEDs() {
  int zone = getHeartRateZone(currentHeartRate);
  uint32_t color = getZoneColor(zone);
  for (int i = 0; i < LED_COUNT; i++) {
    if ((i + 1) % 3 != 0) { // Check if the LED is not the third one
      strip.setPixelColor(i, color);
    } else {
      strip.setPixelColor(i, 0, 0, 0); // Turn off every third LED
    }
  }
  strip.show();
  delay(PULSE_DURATION);
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, 0, 0, 0);
  }
  strip.show();
}

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    Serial.print("BLE Advertised Device found: ");
    Serial.println(advertisedDevice.toString().c_str());
    Serial.print("RSSI: ");
    Serial.println(advertisedDevice.getRSSI());

    if (advertisedDevice.isAdvertisingService(serviceUUID)) {
      Serial.print("Heart Rate Device found. address: ");
      Serial.println(advertisedDevice.getAddress().toString().c_str());
      advertisedDevice.getScan()->stop();
      pServerAddress = new BLEAddress(advertisedDevice.getAddress());
      doConnect = true;
    }
  }
};

void setup() {
  Serial.begin(115200);
  strip.begin();
  strip.show();
  BLEDevice::init("ESP32_HR_LED");
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->start(SCAN_TIME);
}

void loop() {
  unsigned long lastScanBlink = 0;
  const long scanBlinkInterval = 500;

  if (doConnect) {
    BLEClient* pClient = BLEDevice::createClient();
    pClient->setClientCallbacks(new MyClientCallback());
    Serial.println("Attempting to connect...");
    delay(200);
    if (pClient->connect(*pServerAddress)) {
      delay(200);
      Serial.println("Connected to server");
      if (pClient->isConnected()) {
        Serial.println("Client is connected.");
        pRemoteService = pClient->getService(serviceUUID);
        if (pRemoteService != nullptr) {
          Serial.println("Service found");
          pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);
          if (pRemoteCharacteristic != nullptr) {
            Serial.println("Characteristic found");
            if (pRemoteCharacteristic->canNotify()) {
              Serial.println("Characteristic can notify");
              pRemoteCharacteristic->registerForNotify(notifyCallback);
              connected = true;
              doConnect = false;
            } else {
              Serial.println("Error: Characteristic cannot notify");
              pClient->disconnect();
              doConnect = false;
            }
          } else {
            Serial.println("Error: Characteristic not found");
            pClient->disconnect();
            doConnect = false;
          }
        } else {
          Serial.println("Error: Service not found");
          pClient->disconnect();
          doConnect = false;
        }
      } else {
        Serial.println("Error: Client is not connected after connect function");
        pClient->disconnect();
        doConnect = false;
      }
    } else {
      Serial.println("Error: Failed to connect to server");
      doConnect = false;
    }
    if (!connected) {
      Serial.println("Connection failed. Restarting scan after delay...");
      delay(RETRY_DELAY);
      BLEDevice::getScan()->start(SCAN_TIME);
    }
  }

  if (connected) {
  } else if (doScan) {
    if (millis() - lastScanBlink >= scanBlinkInterval) {
      scanBlink();
      lastScanBlink = millis();
    }
  }

  delay(10);
}

void scanBlink() {
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, 0, 0, 255);
  }
  strip.show();
  delay(250);
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, 0, 0, 0);
  }
  strip.show();
  delay(250);
}
