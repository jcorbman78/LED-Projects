#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <Adafruit_NeoPixel.h>

#define LED_PIN 4
#define LED_COUNT 144
#define SCAN_TIME 60
#define RETRY_DELAY 5000
#define PULSE_DURATION 150 // Total duration of the pulse (fade in + hold + fade out) in milliseconds
#define PULSE_BRIGHTNESS 255 * BRIGHTNESS_PERCENT // Full brightness for the pulse
#define BRIGHTNESS_PERCENT 0.25                  // Overall brightness scaling
#define BASE_DIM_BRIGHTNESS 10 * BRIGHTNESS_PERCENT // Dim brightness when not pulsing
#define FADE_IN_DURATION 50
#define FADE_OUT_DURATION 100

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

static BLEUUID serviceUUID("180D"); // Heart Rate Service UUID
static BLEUUID charUUID("2A37");    // Heart Rate Measurement Characteristic UUID

static boolean doConnect = false;
static boolean connected = false;
static boolean doScan = true;
static BLERemoteCharacteristic* pRemoteCharacteristic;
static BLERemoteService* pRemoteService;
static BLEAddress* pServerAddress = nullptr; // Initialize to nullptr

unsigned long lastHeartbeatTime = 0;
int currentHeartRate = 0;
bool isPulsing = false;
unsigned long pulseStartTime = 0;
uint32_t pulseColor; // Store the color for the current pulse

class MyClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient* pclient) {
    connected = true;
    doScan = false;
    Serial.println("Client Connected");
  }

  void onDisconnect(BLEClient* pclient) {
    connected = false;
    doScan = true;
    Serial.println("Client Disconnected");
    if (pServerAddress != nullptr) {
      delete pServerAddress;
      pServerAddress = nullptr;
    }
    setAllLedsDim();
  }
};

static void notifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
  if (length > 1) {
    currentHeartRate = pData[1];
    Serial.print("Heart Rate: ");
    Serial.println(currentHeartRate);
    lastHeartbeatTime = millis();
    startHeartbeatPulse();
  } else {
    Serial.println("Error: Heart rate data length is invalid.");
  }
}

int getHeartRateZone(int heartRate) {
  if (heartRate <= 108) return 1;
  if (heartRate <= 134) return 2;
  if (heartRate <= 146) return 3;
  if (heartRate <= 154) return 4;
  if (heartRate <= 162) return 5;
  return 6;
}

uint32_t getZoneColor(int zone) {
  switch (zone) {
    case 1: return strip.Color(75 * BRIGHTNESS_PERCENT, 0 * BRIGHTNESS_PERCENT, 130 * BRIGHTNESS_PERCENT);
    case 2: return strip.Color(0 * BRIGHTNESS_PERCENT, 0 * BRIGHTNESS_PERCENT, 255 * BRIGHTNESS_PERCENT);
    case 3: return strip.Color(255 * BRIGHTNESS_PERCENT, 255 * BRIGHTNESS_PERCENT, 0 * BRIGHTNESS_PERCENT);
    case 4: return strip.Color(255 * BRIGHTNESS_PERCENT, 165 * BRIGHTNESS_PERCENT, 0 * BRIGHTNESS_PERCENT);
    case 5: return strip.Color(255 * BRIGHTNESS_PERCENT, 0 * BRIGHTNESS_PERCENT, 0 * BRIGHTNESS_PERCENT);
    case 6: return strip.Color(255 * BRIGHTNESS_PERCENT, 192 * BRIGHTNESS_PERCENT, 203 * BRIGHTNESS_PERCENT);
    default: return strip.Color(0, 0, 0);
  }
}

void setAllLedsColor(uint32_t color) {
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, color);
  }
  strip.show();
}

void setAllLedsDim() {
  for (int i = 0; i < LED_COUNT; i++) {
    if ((i + 1) % 3 != 0) {
      strip.setPixelColor(i, strip.Color(BASE_DIM_BRIGHTNESS, 0, 0)); // Dim red
    } else {
      strip.setPixelColor(i, 0, 0, 0);
    }
  }
  strip.show();
}

void fadeToColor(uint32_t startColor, uint32_t endColor, int duration) {
  uint8_t startR = (startColor >> 16) & 0xFF;
  uint8_t startG = (startColor >> 8) & 0xFF;
  uint8_t startB = startColor & 0xFF;
  uint8_t endR = (endColor >> 16) & 0xFF;
  uint8_t endG = (endColor >> 8) & 0xFF;
  uint8_t endB = endColor & 0xFF;

  int steps = 20; // Number of fade steps
  float stepDelay = (float)duration / steps;

  for (int i = 0; i <= steps; i++) {
    float factor = (float)i / steps;
    uint8_t r = startR + (endR - startR) * factor;
    uint8_t g = startG + (endG - startG) * factor;
    uint8_t b = startB + (endB - startB) * factor;
    setAllLedsColor(strip.Color(r, g, b));
    delay(stepDelay);
  }
}

void startHeartbeatPulse() {
  int zone = getHeartRateZone(currentHeartRate);
  pulseColor = getZoneColor(zone);
  setAllLedsColor(pulseColor); // Immediately turn on at full brightness
  isPulsing = true;
  pulseStartTime = millis();
}

void loop() {
  unsigned long lastScanBlink = 0;
  const long scanBlinkInterval = 500;

  if (doConnect) {
    BLEClient* pClient = BLEDevice::createClient();
    pClient->setClientCallbacks(new MyClientCallback());

    Serial.println("Attempting to connect...");
    delay(200);

    if (pClient->connect(*pServerAddress)) {
      Serial.println("Connected to server");
      delay(200);

      if (pClient->isConnected()) {
        Serial.println("Client is connected.");
        pRemoteService = pClient->getService(serviceUUID);

        if (pRemoteService) {
          Serial.println("Service found");
          pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);

          if (pRemoteCharacteristic) {
            Serial.println("Characteristic found");

            if (pRemoteCharacteristic->canNotify()) {
              Serial.println("Characteristic can notify");
              pRemoteCharacteristic->registerForNotify(notifyCallback);
              connected = true;
              doConnect = false;
              setAllLedsDim(); // Set to dim after connecting
            } else {
              Serial.println("Error: Characteristic cannot notify");
              pClient->disconnect();
              doConnect = false;
            }
          } else {
            Serial.println("Error: Characteristic not found");
            pClient->disconnect();
            doConnect = false;
          }
        } else {
          Serial.println("Error: Service not found");
          pClient->disconnect();
          doConnect = false;
        }
      } else {
        Serial.println("Error: Client is not connected after connect function");
        pClient->disconnect();
        doConnect = false;
      }
    } else {
      Serial.println("Error: Failed to connect to server");
      doConnect = false;
    }
    if (!connected) {
      Serial.println("Connection failed. Restarting scan after delay...");
      delay(RETRY_DELAY);
      BLEDevice::getScan()->start(SCAN_TIME);
    }
  }

  if (connected) {
    if (isPulsing) {
      if (millis() - pulseStartTime >= PULSE_DURATION) {
        setAllLedsDim();
        isPulsing = false;
      }
    } else {
      // Keep the LEDs in a dim state when not actively pulsing
      if (!doScan) {
        setAllLedsDim();
      }
    }
  } else if (doScan) {
    if (millis() - lastScanBlink >= scanBlinkInterval) {
      scanBlink();
      lastScanBlink = millis();
    }
  }

  delay(10);
}
