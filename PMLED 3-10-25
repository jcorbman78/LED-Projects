#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <Adafruit_NeoPixel.h>

#define LED_PIN 4
#define LED_COUNT 144
#define SCAN_TIME 60
#define RETRY_DELAY 5000
#define BRIGHTNESS_PERCENT 80 // Brightness percentage (0-100)
#define SMOOTHING_WINDOW 3000 // 3 seconds in milliseconds
#define TRANSITION_RANGE 20   // Range for smooth transitions between zones

#define ZONE_1 1      // recovery watts - dark purple
#define ZONE_2 125    // endurance - blue
#define ZONE_3 160    // tempo - green
#define ZONE_4 212    // threshold - yellow
#define ZONE_5 273    // aerobic - orange
#define ZONE_6 380    // nm - red
#define ZONE_7 381    // above nm - pink

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

static BLEUUID serviceUUID("1818"); // Cycling Power Service UUID
static BLEUUID charUUID("2A63");    // Cycling Power Measurement Characteristic UUID

static boolean doConnect = false;
static boolean connected = false;
static boolean doScan = true;
static BLERemoteCharacteristic* pRemoteCharacteristic;
static BLERemoteService* pRemoteService;
static BLEAddress* pServerAddress;

BLEAddress targetAddress("C9:35:6D:0D:51:03"); // Target Power Meter Address

class MyClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient* pclient) {
    connected = true;
    doScan = false;
    Serial.println("Client Connected");
  }

  void onDisconnect(BLEClient* pclient) {
    connected = false;
    doScan = true;
    Serial.println("Client Disconnected");
  }
};

int powerBuffer[100]; // Buffer to store power readings
int bufferIndex = 0;
unsigned long lastPowerUpdate = 0;

static void notifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
  if (length >= 4) { // Ensure enough data for power measurement
    int16_t power = (pData[3] << 8) | pData[2]; // Power is in bytes 2 and 3 (little-endian)
    powerBuffer[bufferIndex] = power;
    bufferIndex = (bufferIndex + 1) % 100; // Circular buffer
    lastPowerUpdate = millis();
  } else {
    Serial.println("Error: Power data length is invalid.");
  }
}

int getAveragePower() {
  unsigned long currentTime = millis();
  if (currentTime - lastPowerUpdate > SMOOTHING_WINDOW) {
    return 0; // Return 0 if no recent data
  }

  long sum = 0;
  int count = 0;
  unsigned long startTime = currentTime - SMOOTHING_WINDOW;

  for (int i = 0; i < 100; i++) {
    int index = (bufferIndex - 1 - i + 100) % 100; // Access buffer in reverse order
    if (lastPowerUpdate - (i * (SMOOTHING_WINDOW / 100)) <= startTime) break; // if the value is older than our window stop.
    sum += powerBuffer[index];
    count++;
  }

  if (count > 0) {
    return sum / count;
  } else {
    return 0;
  }
}

uint32_t getTransitionColor(int power, int zoneLow, int zoneHigh, uint32_t colorLow, uint32_t colorHigh) {
  int transitionStart = zoneHigh - TRANSITION_RANGE;
  if (power < transitionStart) {
    return colorLow;
  } else if (power >= zoneHigh) {
    return colorHigh;
  } else {
    float ratio = (float)(power - transitionStart) / TRANSITION_RANGE;
    uint8_t redLow = (colorLow >> 16) & 0xFF;
    uint8_t greenLow = (colorLow >> 8) & 0xFF;
    uint8_t blueLow = colorLow & 0xFF;
    uint8_t redHigh = (colorHigh >> 16) & 0xFF;
    uint8_t greenHigh = (colorHigh >> 8) & 0xFF;
    uint8_t blueHigh = colorHigh & 0xFF;
    uint8_t red = redLow + (redHigh - redLow) * ratio;
    uint8_t green = greenLow + (greenHigh - greenLow) * ratio;
    uint8_t blue = blueLow + (blueHigh - blueLow) * ratio;
    return strip.Color(red, green, blue);
  }
}

uint32_t getZoneColor(int power) {
  if (power < ZONE_2) return strip.Color(75, 0, 130);
  if (power < ZONE_3) return getTransitionColor(power, ZONE_2, ZONE_3, strip.Color(0, 0, 255), strip.Color(0, 255, 0));
  if (power < ZONE_4) return getTransitionColor(power, ZONE_3, ZONE_4, strip.Color(0, 255, 0), strip.Color(255, 255, 0));
  if (power < ZONE_5) return getTransitionColor(power, ZONE_4, ZONE_5, strip.Color(255, 255, 0), strip.Color(255, 165, 0));
  if (power < ZONE_6) return getTransitionColor(power, ZONE_5, ZONE_6, strip.Color(255, 165, 0), strip.Color(255, 0, 0));
  if (power >= ZONE_6) return getTransitionColor(power, ZONE_6, ZONE_7, strip.Color(255, 0, 0), strip.Color(255, 192, 203));
  return strip.Color(0, 0, 0);
}

void updateLEDs(int power) {
  uint32_t color = getZoneColor(power);
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, color);
  }
  strip.show();
}

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    Serial.print("BLE Advertised Device found: ");
    Serial.println(advertisedDevice.toString().c_str());
    Serial.print("RSSI: ");
    Serial.println(advertisedDevice.getRSSI());

    if (advertisedDevice.getAddress() == targetAddress) { // Check for target address
      Serial.print("Target Power Meter found. address: ");
      Serial.println(advertisedDevice.getAddress().toString().c_str());
      advertisedDevice.getScan()->stop();
      pServerAddress = new BLEAddress(advertisedDevice.getAddress());
      doConnect = true;
    }
  }
};

void scanBlink() {
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, 0, 0, 255);
  }
  strip.show();
  delay(250);
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, 0, 0, 0);
  }
  strip.show();
  delay(250);
}

void setup() {
  Serial.begin(115200);
  strip.begin();
  strip.setBrightness((BRIGHTNESS_PERCENT * 255) / 100); // Set brightness
  strip.show();
  BLEDevice::init("ESP32_Power_LED");
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->start(SCAN_TIME);
}
void loop() {
  unsigned long lastScanBlink = 0;
  const long scanBlinkInterval = 500;

  if (doConnect) {
    // Attempt to connect to the BLE server
    BLEClient* pClient = BLEDevice::createClient();
    pClient->setClientCallbacks(new MyClientCallback());
    Serial.println("Attempting to connect...");
    delay(200);

    if (pClient->connect(*pServerAddress)) {
      Serial.println("Connected to server");
      delay(200);

      if (pClient->isConnected()) {
        Serial.println("Client is connected.");

        // Find the desired service and characteristic
        pRemoteService = pClient->getService(serviceUUID);
        if (pRemoteService) {
          Serial.println("Service found");
          pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);

          if (pRemoteCharacteristic) {
            Serial.println("Characteristic found");

            // Check if the characteristic can notify and register for notifications
            if (pRemoteCharacteristic->canNotify()) {
              Serial.println("Characteristic can notify");
              pRemoteCharacteristic->registerForNotify(notifyCallback);
              connected = true;
              doConnect = false; // Connection successful, stop trying to connect
            } else {
              Serial.println("Error: Characteristic cannot notify");
              pClient->disconnect();
              doConnect = false;
            }
          } else {
            Serial.println("Error: Characteristic not found");
            pClient->disconnect();
            doConnect = false;
          }
        } else {
          Serial.println("Error: Service not found");
          pClient->disconnect();
          doConnect = false;
        }
      } else {
        Serial.println("Error: Client is not connected after connect function");
        pClient->disconnect();
        doConnect = false;
      }
    } else {
      Serial.println("Error: Failed to connect to server");
      doConnect = false;
    }

    // If connection failed, restart scan after a delay
    if (!connected) {
      Serial.println("Connection failed. Restarting scan after delay...");
      delay(RETRY_DELAY);
      BLEDevice::getScan()->start(SCAN_TIME);
    }
  }

  if (connected) {
    // No need to read value, notify callback automatically handles the data
    int averagePower = getAveragePower();
    updateLEDs(averagePower);

  } else if (doScan) {
    if (millis() - lastScanBlink >= scanBlinkInterval) {
      scanBlink();
      lastScanBlink = millis();
    }
  }

  delay(10);
}
