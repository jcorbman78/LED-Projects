#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <Adafruit_NeoPixel.h>
#include <deque>

#define LED_PIN 4
#define LED_COUNT 144
#define SCAN_TIME 60
#define RETRY_DELAY 5000
#define SAMPLE_RATE 10
#define SMOOTHING_WINDOW SAMPLE_RATE
#define BRIGHTNESS_PERCENT 80

// Power Zones
#define ZONE_1_MAX 50
#define ZONE_1A_MAX 51
#define ZONE_2_MAX 125
#define ZONE_2A_MAX 150
#define ZONE_3_MAX 160
#define ZONE_3A_MAX 200
#define ZONE_4_MAX 212
#define ZONE_4A_MAX 260
#define ZONE_5_MAX 273
#define ZONE_5A_MAX 370
#define ZONE_6_MAX 380

// Heart Rate Zones
#define HR_ZONE_1_MAX 80
#define HR_ZONE_2_MAX 100
#define HR_ZONE_3_MAX 120
#define HR_ZONE_4_MAX 140
#define HR_ZONE_5_MAX 160
#define HR_ZONE_6_MAX 180

// Pulse Effects
#define PULSE_FADE_IN_DURATION 150
#define PULSE_FADE_OUT_DURATION 250
#define PULSE_HOLD_DURATION 100
#define PULSE_DELAY 150
#define PULSE_FADE_IN_DURATION_2 180
#define PULSE_FADE_OUT_DURATION_2 500
#define PULSE_HOLD_DURATION_2 120

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

// Power Variables
static BLEUUID powerServiceUUID("1818");
static BLEUUID powerCharUUID("2A63");
BLEAddress powerTargetAddress("C9:35:6D:0D:51:03");
std::deque<int16_t> powerHistory;

// Heart Rate Variables
static BLEUUID hrServiceUUID("180D");
static BLEUUID hrCharUUID("2A37");
unsigned long lastHeartbeatTime = 0;
int currentHeartRate = 0;

// Connection States
enum ConnectionState {
  STATE_IDLE,
  STATE_SCANNING,
  STATE_CONNECTING_POWER,
  STATE_CONNECTED_POWER,
  STATE_CONNECTING_HR,
  STATE_CONNECTED_HR,
  STATE_DISCONNECTING
};

ConnectionState currentState = STATE_IDLE;
BLEClient* pClient = nullptr;
unsigned long lastScanTime = 0;
const unsigned long scanInterval = 10000; // 10 seconds scan interval

class MyClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient* pclient) {
    if (pclient->getService(powerServiceUUID)) {
      currentState = STATE_CONNECTED_POWER;
      Serial.println("Power Client Connected");
    } else if (pclient->getService(hrServiceUUID)) {
      currentState = STATE_CONNECTED_HR;
      Serial.println("HR Client Connected");
    }
  }

  void onDisconnect(BLEClient* pclient) {
    Serial.println("Client Disconnected");
    currentState = STATE_SCANNING;
    if (pClient != nullptr) {
      delete pClient;
      pClient = nullptr;
    }
  }
};

static void powerNotifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
  if (length >= 4) {
    int16_t power = (pData[3] << 8) | pData[2];
    powerHistory.push_back(power);
    if (powerHistory.size() > SMOOTHING_WINDOW) {
      powerHistory.pop_front();
    }
    int32_t sum = 0;
    for (int16_t p : powerHistory) {
      sum += p;
    }
    int16_t smoothedPower = powerHistory.empty() ? 0 : sum / powerHistory.size();
    Serial.print("Smoothed Power: ");
    Serial.println(smoothedPower);
    updatePowerLEDs(smoothedPower);
  } else {
    Serial.println("Error: Power data length is invalid.");
  }
}

static void hrNotifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
  if (length > 1) {
    currentHeartRate = pData[1];
    Serial.print("Heart Rate: ");
    Serial.println(currentHeartRate);
    lastHeartbeatTime = millis();
    pulseHRLEDs();
  } else {
    Serial.println("Error: Heart rate data length is invalid.");
  }
}

// Power Functions
int getPowerZone(int power) {
  if (power <= ZONE_1_MAX) return 1;
  if (power <= ZONE_1A_MAX) return 15;
  if (power <= ZONE_2_MAX) return 2;
  if (power <= ZONE_2A_MAX) return 25;
  if (power <= ZONE_3_MAX) return 3;
  if (power <= ZONE_3A_MAX) return 35;
  if (power <= ZONE_4_MAX) return 4;
  if (power <= ZONE_4A_MAX) return 45;
  if (power <= ZONE_5_MAX) return 5;
  if (power <= ZONE_5A_MAX) return 55;
  if (power <= ZONE_6_MAX) return 6;
  return 7;
}

uint32_t getPowerZoneColor(int zone) {
  switch (zone) {
    case 1: return strip.Color(75, 75, 75);
    case 15: return strip.Color(100, 0, 155);
    case 2: return strip.Color(0, 0, 255);
    case 25: return strip.Color(0, 100, 255);
    case 3: return strip.Color(0, 255, 0);
    case 35: return strip.Color(100, 255, 100);
    case 4: return strip.Color(255, 255, 0);
    case 45: return strip.Color(255, 200, 0);
    case 5: return strip.Color(255, 165, 0);
    case 55: return strip.Color(255, 100, 0);
    case 6: return strip.Color(255, 0, 0);
    case 7: return strip.Color(255, 192, 203);
    default: return strip.Color(0, 0, 0);
  }
}
void updatePowerLEDs(int power) {
  int zone = getPowerZone(power);
  uint32_t color = getPowerZoneColor(zone);
  uint8_t r = (color >> 16) & 0xFF;
  uint8_t g = (color >> 8) & 0xFF;
  uint8_t b = color & 0xFF;
  r = (r * BRIGHTNESS_PERCENT) / 100;
  g = (g * BRIGHTNESS_PERCENT) / 100;
  b = (b * BRIGHTNESS_PERCENT) / 100;
  for (int i = 0; i < 72; i++) {
    strip.setPixelColor(i, strip.Color(r, g, b));
  }
  strip.show();
}

// Heart Rate Functions
int getHeartRateZone(int heartRate) {
  if (heartRate <= HR_ZONE_1_MAX) return 1;
  if (heartRate <= HR_ZONE_2_MAX) return 2;
  if (heartRate <= HR_ZONE_3_MAX) return 3;
  if (heartRate <= HR_ZONE_4_MAX) return 4;
  if (heartRate <= HR_ZONE_5_MAX) return 5;
  if (heartRate <= HR_ZONE_6_MAX) return 6;
  return 7;
}

uint32_t getHeartRateZoneColor(int zone) {
  switch (zone) {
    case 1: return strip.Color(0, 255, 0);
    case 2: return strip.Color(50, 205, 50);
    case 3: return strip.Color(255, 255, 0);
    case 4: return strip.Color(255, 165, 0);
    case 5: return strip.Color(255, 69, 0);
    case 6: return strip.Color(255, 0, 0);
    case 7: return strip.Color(139, 0, 0);
    default: return strip.Color(0, 0, 0);
  }
}

void fadeHRLEDs(uint32_t color, int fadeDuration, bool fadeIn) {
  uint8_t r = (color >> 16) & 0xFF;
  uint8_t g = (color >> 8) & 0xFF;
  uint8_t b = color & 0xFF;

  int steps = 20;
  float stepDelay = (float)fadeDuration / steps;

  for (int step = 0; step <= steps; step++) {
    float brightness = fadeIn ? (float)step / steps : 1.0 - (float)step / steps;
    uint8_t fadedR = r * brightness;
    uint8_t fadedG = g * brightness;
    uint8_t fadedB = b * brightness;

    for (int i = 72; i < LED_COUNT; i++) {
      strip.setPixelColor(i, strip.Color(fadedR, fadedG, fadedB));
    }
    strip.show();
    delay(stepDelay);
  }
}

void pulseHRLEDs() {
  int zone = getHeartRateZone(currentHeartRate);
  uint32_t color = getHeartRateZoneColor(zone);

  fadeHRLEDs(color, PULSE_FADE_IN_DURATION, true);
  delay(PULSE_HOLD_DURATION);
  fadeHRLEDs(color, PULSE_FADE_OUT_DURATION, false);

  delay(PULSE_DELAY);

  fadeHRLEDs(color, PULSE_FADE_IN_DURATION_2, true);
  delay(PULSE_HOLD_DURATION_2);
  fadeHRLEDs(color, PULSE_FADE_OUT_DURATION_2, false);
}

// Advertised Device Callbacks
class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    Serial.print("BLE Advertised Device found: ");
    Serial.println(advertisedDevice.toString().c_str());
    Serial.print("RSSI: ");
    Serial.println(advertisedDevice.getRSSI());

    if (advertisedDevice.getAddress() == powerTargetAddress && currentState == STATE_SCANNING) {
      Serial.print("Target Power Meter found. address: ");
      Serial.println(advertisedDevice.getAddress().toString().c_str());
      advertisedDevice.getScan()->stop();
      BLEAddress powerServerAddress = advertisedDevice.getAddress();
      currentState = STATE_CONNECTING_POWER;
      connectToDevice(powerServerAddress, powerServiceUUID, powerCharUUID, powerNotifyCallback);
    }

    if (advertisedDevice.isAdvertisingService(hrServiceUUID) && currentState == STATE_SCANNING) {
      Serial.print("Heart Rate Device found. address: ");
      Serial.println(advertisedDevice.getAddress().toString().c_str());
      advertisedDevice.getScan()->stop();
      BLEAddress hrServerAddress = advertisedDevice.getAddress();
      currentState = STATE_CONNECTING_HR;
      connectToDevice(hrServerAddress, hrServiceUUID, hrCharUUID, hrNotifyCallback);
    }
  }
};

void setup() {
  Serial.begin(115200);
  strip.begin();
  strip.show();
  BLEDevice::init("ESP32_Power_HR_LED");
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  currentState = STATE_SCANNING;
  lastScanTime = millis();
  pBLEScan->start(SCAN_TIME, false); // No need to restart scan after finish
}

void scanBlink() {
  for (int i = 0; i < 72; i++) {
    strip.setPixelColor(i, 0, 0, 255);
  }
  for (int i = 72; i < LED_COUNT; i++) {
    strip.setPixelColor(i, strip.Color(0, 255, 255));
  }
  strip.show();
  delay(250);
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, 0, 0, 0);
  }
  strip.show();
  delay(250);
}

void loop() {
  unsigned long currentTime = millis();
  if (currentState == STATE_SCANNING) {
    if (currentTime - lastScanTime >= scanInterval) {
      BLEDevice::getScan()->start(SCAN_TIME, false);
      lastScanTime = currentTime;
      scanBlink();
    }
  } else if (currentState == STATE_CONNECTING_POWER || currentState == STATE_CONNECTING_HR) {
    //Connections are handled inside the onResult function.
  } else if (currentState == STATE_CONNECTED_POWER || currentState == STATE_CONNECTED_HR) {
    // Leave it to notify callbacks to update LEDs.
  }

  delay(10);
}

void connectToDevice(BLEAddress address, BLEUUID serviceUUID, BLEUUID charUUID, void (*notifyCallback)(BLERemoteCharacteristic*, uint8_t*, size_t, bool)) {
  if (pClient != nullptr) {
    delete pClient;
    pClient = nullptr;
  }
  pClient = BLEDevice::createClient();
  pClient->setClientCallbacks(new MyClientCallback());

  Serial.println("Attempting to connect...");
  if (pClient->connect(address)) {
    Serial.println("Connected");
    BLERemoteService* remoteService = pClient->getService(serviceUUID);
    if (remoteService) {
      BLERemoteCharacteristic* remoteCharacteristic = remoteService->getCharacteristic(charUUID);
      if (remoteCharacteristic && remoteCharacteristic->canNotify()) {
        remoteCharacteristic->registerForNotify(notifyCallback);
      } else {
        Serial.println("Characteristic or notify failed");
        pClient->disconnect();
      }
    } else {
      Serial.println("Service failed");
      pClient->disconnect();
    }
  } else {
    Serial.println("Connect failed");
    currentState = STATE_SCANNING;
  }
}
